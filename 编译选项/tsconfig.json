{
  //1.监视某一ts文件，并编译为js文件命令  tsc xxx.ts -w  (-w表示实时编译)
//2.通过配置文件 tsconfig.json 编译ts文件，然后 tsc 命令就可以编译src目录下的所有ts文件
  //tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的配置对代码进行编译
  //这个json文件比较特殊，可以写注释

  /*
    "include" 用来指定哪些ts文件需要被编译
        路径: **表示任意目录
              * 表示任意文件

    
    "exclude" 不需要编译的文件目录
    默认值：["node_modules","bower_components","jspm_packages"]    
    
    include 是针对文件夹的，files是针对文件的，可以具体指定哪些文件需要编译，通常文件少的时候使用
  */
  "include":[
    "./src/**/*", //表示当前目录的src目录下的任意目录下的任意文件
  ],
  "exclude": [
    "./src/hello/**/*"
  ],
  "files": ["src/index.ts"],

  "compilerOptions":{ //编译器选项
    "target":"ES6", //用来指定TS编译为ES的版本，默认值为ES3,可选项有ES3、ES5、ES6、ES2015.。。等
    "module":"AMD",//指定要使用的模块化规范  AMD、UMD、ES6、CommonJS等
    //"lib":[""],//用来指定浏览器/node（宿主环境）中要使用的库 dom、ES6、....,一般情况下不需要改变这个值
    "outDir":"./dist",//用来指定编译后文件所在的目录
    //"outFile":"./dist/app.js", //将代码合并为一个文件，设置outFile后，所有的全局作用域中的代码会合并到一个文件中，但如果有模块化的代码只支持AMD和system模块，后面需要webpack处理代码合并
    "allowJs": true, //是否对js文件进行编译，默认为false
    "checkJs": true,//是否对js进行ts语法规范检测,默认为false
    "removeComments": true,//是否移除注释，默认为false
    "noEmit": false,//不生成编译后的文件，默认为false
    "noEmitOnError": true,//在出现错误时，不生成编译后的文件,默认为false

    //所有严格检查的总开关,默认为false
    "strict": false,
    "alwaysStrict": false,//是来设置编译后的文件是否开启严格模式，默认为false
    "noImplicitAny": false,//不允许隐式的any类型
    "noImplicitThis": false,//不允许不明确类型的this
    "strictNullChecks": false,//严格的检查空值
  },
  

 
}